
C:\Users\Patrik Bakyta\Documents\GitHub\VRS\F4_Timer_USART\Debug\F4_Timer_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f0c  08000f0c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000f0c  08000f0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f10  08000f10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          0000001c  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000002c  2000002c  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005274  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b6f  00000000  00000000  000252b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000758  00000000  00000000  00025e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006c0  00000000  00000000  00026580  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000231a  00000000  00000000  00026c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002591  00000000  00000000  00028f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002b4eb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001f94  00000000  00000000  0002b56c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002d500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ef4 	.word	0x08000ef4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08000ef4 	.word	0x08000ef4

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <NVIC_Init+0xc0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <NVIC_Init+0xc0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
 800029e:	2300      	movs	r3, #0
 80002a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
 80002a6:	e076      	b.n	8000396 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80002a8:	2201      	movs	r2, #1
 80002aa:	697b      	ldr	r3, [r7, #20]
 80002ac:	fa02 f303 	lsl.w	r3, r2, r3
 80002b0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	4013      	ands	r3, r2
 80002ba:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80002bc:	68fa      	ldr	r2, [r7, #12]
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d165      	bne.n	8000390 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	2103      	movs	r1, #3
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43db      	mvns	r3, r3
 80002d4:	401a      	ands	r2, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	791b      	ldrb	r3, [r3, #4]
 80002e2:	4619      	mov	r1, r3
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ec:	431a      	orrs	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	791b      	ldrb	r3, [r3, #4]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d003      	beq.n	8000302 <GPIO_Init+0x76>
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	791b      	ldrb	r3, [r3, #4]
 80002fe:	2b02      	cmp	r3, #2
 8000300:	d12e      	bne.n	8000360 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	689a      	ldr	r2, [r3, #8]
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	2103      	movs	r1, #3
 800030c:	fa01 f303 	lsl.w	r3, r1, r3
 8000310:	43db      	mvns	r3, r3
 8000312:	401a      	ands	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689a      	ldr	r2, [r3, #8]
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	795b      	ldrb	r3, [r3, #5]
 8000320:	4619      	mov	r1, r3
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	005b      	lsls	r3, r3, #1
 8000326:	fa01 f303 	lsl.w	r3, r1, r3
 800032a:	431a      	orrs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	b29b      	uxth	r3, r3
 8000338:	2101      	movs	r1, #1
 800033a:	fa01 f303 	lsl.w	r3, r1, r3
 800033e:	43db      	mvns	r3, r3
 8000340:	401a      	ands	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	685a      	ldr	r2, [r3, #4]
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	799b      	ldrb	r3, [r3, #6]
 800034e:	4619      	mov	r1, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	b29b      	uxth	r3, r3
 8000354:	fa01 f303 	lsl.w	r3, r1, r3
 8000358:	b29b      	uxth	r3, r3
 800035a:	431a      	orrs	r2, r3
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	b29b      	uxth	r3, r3
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	2103      	movs	r1, #3
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	43db      	mvns	r3, r3
 8000372:	401a      	ands	r2, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68da      	ldr	r2, [r3, #12]
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	79db      	ldrb	r3, [r3, #7]
 8000380:	4619      	mov	r1, r3
 8000382:	697b      	ldr	r3, [r7, #20]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	fa01 f303 	lsl.w	r3, r1, r3
 800038a:	431a      	orrs	r2, r3
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	3301      	adds	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	697b      	ldr	r3, [r7, #20]
 8000398:	2b0f      	cmp	r3, #15
 800039a:	d985      	bls.n	80002a8 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800039c:	bf00      	nop
 800039e:	371c      	adds	r7, #28
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	887b      	ldrh	r3, [r7, #2]
 80003ba:	405a      	eors	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	615a      	str	r2, [r3, #20]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	807b      	strh	r3, [r7, #2]
 80003d8:	4613      	mov	r3, r2
 80003da:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003dc:	2300      	movs	r3, #0
 80003de:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003e4:	787a      	ldrb	r2, [r7, #1]
 80003e6:	887b      	ldrh	r3, [r7, #2]
 80003e8:	f003 0307 	and.w	r3, r3, #7
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003f4:	887b      	ldrh	r3, [r7, #2]
 80003f6:	08db      	lsrs	r3, r3, #3
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	4618      	mov	r0, r3
 80003fc:	887b      	ldrh	r3, [r7, #2]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	b29b      	uxth	r3, r3
 8000402:	461a      	mov	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	3208      	adds	r2, #8
 8000408:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800040c:	887b      	ldrh	r3, [r7, #2]
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	009b      	lsls	r3, r3, #2
 8000414:	210f      	movs	r1, #15
 8000416:	fa01 f303 	lsl.w	r3, r1, r3
 800041a:	43db      	mvns	r3, r3
 800041c:	ea02 0103 	and.w	r1, r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f100 0208 	add.w	r2, r0, #8
 8000426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800042a:	887b      	ldrh	r3, [r7, #2]
 800042c:	08db      	lsrs	r3, r3, #3
 800042e:	b29b      	uxth	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3208      	adds	r2, #8
 8000436:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	4313      	orrs	r3, r2
 800043e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000440:	887b      	ldrh	r3, [r7, #2]
 8000442:	08db      	lsrs	r3, r3, #3
 8000444:	b29b      	uxth	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3208      	adds	r2, #8
 800044c:	68b9      	ldr	r1, [r7, #8]
 800044e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop

08000460 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000460:	b480      	push	{r7}
 8000462:	b089      	sub	sp, #36	; 0x24
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
 800046c:	2300      	movs	r3, #0
 800046e:	617b      	str	r3, [r7, #20]
 8000470:	2300      	movs	r3, #0
 8000472:	61fb      	str	r3, [r7, #28]
 8000474:	2302      	movs	r3, #2
 8000476:	613b      	str	r3, [r7, #16]
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	2302      	movs	r3, #2
 800047e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000480:	4b48      	ldr	r3, [pc, #288]	; (80005a4 <RCC_GetClocksFreq+0x144>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	f003 030c 	and.w	r3, r3, #12
 8000488:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800048a:	69bb      	ldr	r3, [r7, #24]
 800048c:	2b04      	cmp	r3, #4
 800048e:	d007      	beq.n	80004a0 <RCC_GetClocksFreq+0x40>
 8000490:	2b08      	cmp	r3, #8
 8000492:	d009      	beq.n	80004a8 <RCC_GetClocksFreq+0x48>
 8000494:	2b00      	cmp	r3, #0
 8000496:	d13f      	bne.n	8000518 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a43      	ldr	r2, [pc, #268]	; (80005a8 <RCC_GetClocksFreq+0x148>)
 800049c:	601a      	str	r2, [r3, #0]
      break;
 800049e:	e03f      	b.n	8000520 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a42      	ldr	r2, [pc, #264]	; (80005ac <RCC_GetClocksFreq+0x14c>)
 80004a4:	601a      	str	r2, [r3, #0]
      break;
 80004a6:	e03b      	b.n	8000520 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004a8:	4b3e      	ldr	r3, [pc, #248]	; (80005a4 <RCC_GetClocksFreq+0x144>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004b0:	0d9b      	lsrs	r3, r3, #22
 80004b2:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004b4:	4b3b      	ldr	r3, [pc, #236]	; (80005a4 <RCC_GetClocksFreq+0x144>)
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004bc:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d00d      	beq.n	80004e0 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004c4:	4a39      	ldr	r2, [pc, #228]	; (80005ac <RCC_GetClocksFreq+0x14c>)
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80004cc:	4b35      	ldr	r3, [pc, #212]	; (80005a4 <RCC_GetClocksFreq+0x144>)
 80004ce:	6859      	ldr	r1, [r3, #4]
 80004d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80004d4:	400b      	ands	r3, r1
 80004d6:	099b      	lsrs	r3, r3, #6
 80004d8:	fb03 f302 	mul.w	r3, r3, r2
 80004dc:	61fb      	str	r3, [r7, #28]
 80004de:	e00c      	b.n	80004fa <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80004e0:	4a31      	ldr	r2, [pc, #196]	; (80005a8 <RCC_GetClocksFreq+0x148>)
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80004e8:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <RCC_GetClocksFreq+0x144>)
 80004ea:	6859      	ldr	r1, [r3, #4]
 80004ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80004f0:	400b      	ands	r3, r1
 80004f2:	099b      	lsrs	r3, r3, #6
 80004f4:	fb03 f302 	mul.w	r3, r3, r2
 80004f8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80004fa:	4b2a      	ldr	r3, [pc, #168]	; (80005a4 <RCC_GetClocksFreq+0x144>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000502:	0c1b      	lsrs	r3, r3, #16
 8000504:	3301      	adds	r3, #1
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800050a:	69fa      	ldr	r2, [r7, #28]
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
      break;
 8000516:	e003      	b.n	8000520 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a23      	ldr	r2, [pc, #140]	; (80005a8 <RCC_GetClocksFreq+0x148>)
 800051c:	601a      	str	r2, [r3, #0]
      break;
 800051e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000520:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <RCC_GetClocksFreq+0x144>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000528:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800052a:	69bb      	ldr	r3, [r7, #24]
 800052c:	091b      	lsrs	r3, r3, #4
 800052e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000530:	4a1f      	ldr	r2, [pc, #124]	; (80005b0 <RCC_GetClocksFreq+0x150>)
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	4413      	add	r3, r2
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	40da      	lsrs	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <RCC_GetClocksFreq+0x144>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000550:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000552:	69bb      	ldr	r3, [r7, #24]
 8000554:	0a9b      	lsrs	r3, r3, #10
 8000556:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000558:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <RCC_GetClocksFreq+0x150>)
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	4413      	add	r3, r2
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	685a      	ldr	r2, [r3, #4]
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	40da      	lsrs	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <RCC_GetClocksFreq+0x144>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000578:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800057a:	69bb      	ldr	r3, [r7, #24]
 800057c:	0b5b      	lsrs	r3, r3, #13
 800057e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000580:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <RCC_GetClocksFreq+0x150>)
 8000582:	69bb      	ldr	r3, [r7, #24]
 8000584:	4413      	add	r3, r2
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	685a      	ldr	r2, [r3, #4]
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	40da      	lsrs	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]
}
 8000598:	bf00      	nop
 800059a:	3724      	adds	r7, #36	; 0x24
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40023800 	.word	0x40023800
 80005a8:	00f42400 	.word	0x00f42400
 80005ac:	017d7840 	.word	0x017d7840
 80005b0:	20000000 	.word	0x20000000

080005b4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d006      	beq.n	80005d4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005c6:	490a      	ldr	r1, [pc, #40]	; (80005f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80005d2:	e006      	b.n	80005e2 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80005d4:	4906      	ldr	r1, [pc, #24]	; (80005f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	43db      	mvns	r3, r3
 80005de:	4013      	ands	r3, r2
 80005e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d006      	beq.n	8000614 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000606:	490a      	ldr	r1, [pc, #40]	; (8000630 <RCC_APB1PeriphClockCmd+0x3c>)
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <RCC_APB1PeriphClockCmd+0x3c>)
 800060a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4313      	orrs	r3, r2
 8000610:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000612:	e006      	b.n	8000622 <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000614:	4906      	ldr	r1, [pc, #24]	; (8000630 <RCC_APB1PeriphClockCmd+0x3c>)
 8000616:	4b06      	ldr	r3, [pc, #24]	; (8000630 <RCC_APB1PeriphClockCmd+0x3c>)
 8000618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	43db      	mvns	r3, r3
 800061e:	4013      	ands	r3, r2
 8000620:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800

08000634 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000640:	78fb      	ldrb	r3, [r7, #3]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000646:	490a      	ldr	r1, [pc, #40]	; (8000670 <RCC_APB2PeriphClockCmd+0x3c>)
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <RCC_APB2PeriphClockCmd+0x3c>)
 800064a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4313      	orrs	r3, r2
 8000650:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000652:	e006      	b.n	8000662 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000654:	4906      	ldr	r1, [pc, #24]	; (8000670 <RCC_APB2PeriphClockCmd+0x3c>)
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <RCC_APB2PeriphClockCmd+0x3c>)
 8000658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	43db      	mvns	r3, r3
 800065e:	4013      	ands	r3, r2
 8000660:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800

08000674 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a29      	ldr	r2, [pc, #164]	; (8000730 <TIM_TimeBaseInit+0xbc>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d013      	beq.n	80006b8 <TIM_TimeBaseInit+0x44>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a28      	ldr	r2, [pc, #160]	; (8000734 <TIM_TimeBaseInit+0xc0>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d00f      	beq.n	80006b8 <TIM_TimeBaseInit+0x44>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800069e:	d00b      	beq.n	80006b8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a25      	ldr	r2, [pc, #148]	; (8000738 <TIM_TimeBaseInit+0xc4>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d007      	beq.n	80006b8 <TIM_TimeBaseInit+0x44>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a24      	ldr	r2, [pc, #144]	; (800073c <TIM_TimeBaseInit+0xc8>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d003      	beq.n	80006b8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <TIM_TimeBaseInit+0xcc>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d108      	bne.n	80006ca <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80006b8:	89fb      	ldrh	r3, [r7, #14]
 80006ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006be:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	885a      	ldrh	r2, [r3, #2]
 80006c4:	89fb      	ldrh	r3, [r7, #14]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a1d      	ldr	r2, [pc, #116]	; (8000744 <TIM_TimeBaseInit+0xd0>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d00c      	beq.n	80006ec <TIM_TimeBaseInit+0x78>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4a1c      	ldr	r2, [pc, #112]	; (8000748 <TIM_TimeBaseInit+0xd4>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d008      	beq.n	80006ec <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80006da:	89fb      	ldrh	r3, [r7, #14]
 80006dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006e0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	891a      	ldrh	r2, [r3, #8]
 80006e6:	89fb      	ldrh	r3, [r7, #14]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	89fa      	ldrh	r2, [r7, #14]
 80006f0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	881a      	ldrh	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <TIM_TimeBaseInit+0xbc>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d003      	beq.n	8000712 <TIM_TimeBaseInit+0x9e>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a09      	ldr	r2, [pc, #36]	; (8000734 <TIM_TimeBaseInit+0xc0>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d104      	bne.n	800071c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	7a9b      	ldrb	r3, [r3, #10]
 8000716:	b29a      	uxth	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2201      	movs	r2, #1
 8000720:	829a      	strh	r2, [r3, #20]
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40010000 	.word	0x40010000
 8000734:	40010400 	.word	0x40010400
 8000738:	40000400 	.word	0x40000400
 800073c:	40000800 	.word	0x40000800
 8000740:	40000c00 	.word	0x40000c00
 8000744:	40001000 	.word	0x40001000
 8000748:	40001400 	.word	0x40001400

0800074c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d008      	beq.n	8000770 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	b29b      	uxth	r3, r3
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	b29a      	uxth	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800076e:	e007      	b.n	8000780 <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b29b      	uxth	r3, r3
 8000776:	f023 0301 	bic.w	r3, r3, #1
 800077a:	b29a      	uxth	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	801a      	strh	r2, [r3, #0]
  }
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	460b      	mov	r3, r1
 8000796:	807b      	strh	r3, [r7, #2]
 8000798:	4613      	mov	r3, r2
 800079a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800079c:	787b      	ldrb	r3, [r7, #1]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d008      	beq.n	80007b4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	899b      	ldrh	r3, [r3, #12]
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	887b      	ldrh	r3, [r7, #2]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80007b2:	e009      	b.n	80007c8 <TIM_ITConfig+0x3c>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	899b      	ldrh	r3, [r3, #12]
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	887b      	ldrh	r3, [r7, #2]
 80007bc:	43db      	mvns	r3, r3
 80007be:	b29b      	uxth	r3, r3
 80007c0:	4013      	ands	r3, r2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	819a      	strh	r2, [r3, #12]
  }
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80007e0:	2300      	movs	r3, #0
 80007e2:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	81bb      	strh	r3, [r7, #12]
 80007e8:	2300      	movs	r3, #0
 80007ea:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	8a1b      	ldrh	r3, [r3, #16]
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	887b      	ldrh	r3, [r7, #2]
 80007f4:	4013      	ands	r3, r2
 80007f6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	899b      	ldrh	r3, [r3, #12]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	887b      	ldrh	r3, [r7, #2]
 8000800:	4013      	ands	r3, r2
 8000802:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d005      	beq.n	8000816 <TIM_GetITStatus+0x42>
 800080a:	897b      	ldrh	r3, [r7, #10]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d002      	beq.n	8000816 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000810:	2301      	movs	r3, #1
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	e001      	b.n	800081a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	43db      	mvns	r3, r3
 8000838:	b29a      	uxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	821a      	strh	r2, [r3, #16]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	8a1b      	ldrh	r3, [r3, #16]
 800086a:	b29b      	uxth	r3, r3
 800086c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000874:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	88db      	ldrh	r3, [r3, #6]
 800087a:	461a      	mov	r2, r3
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	4313      	orrs	r3, r2
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000884:	b29a      	uxth	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	899b      	ldrh	r3, [r3, #12]
 800088e:	b29b      	uxth	r3, r3
 8000890:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000894:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000898:	f023 030c 	bic.w	r3, r3, #12
 800089c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	889a      	ldrh	r2, [r3, #4]
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	891b      	ldrh	r3, [r3, #8]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b6:	4313      	orrs	r3, r2
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80008ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008bc:	b29a      	uxth	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	8a9b      	ldrh	r3, [r3, #20]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80008ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	899b      	ldrh	r3, [r3, #12]
 80008d6:	461a      	mov	r2, r3
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008da:	4313      	orrs	r3, r2
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80008de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fdb8 	bl	8000460 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a30      	ldr	r2, [pc, #192]	; (80009b4 <USART_Init+0x168>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d003      	beq.n	8000900 <USART_Init+0xb4>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a2f      	ldr	r2, [pc, #188]	; (80009b8 <USART_Init+0x16c>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d102      	bne.n	8000906 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	623b      	str	r3, [r7, #32]
 8000904:	e001      	b.n	800090a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	899b      	ldrh	r3, [r3, #12]
 800090e:	b29b      	uxth	r3, r3
 8000910:	b21b      	sxth	r3, r3
 8000912:	2b00      	cmp	r3, #0
 8000914:	da0c      	bge.n	8000930 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000916:	6a3a      	ldr	r2, [r7, #32]
 8000918:	4613      	mov	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	009a      	lsls	r2, r3, #2
 8000920:	441a      	add	r2, r3
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	fbb2 f3f3 	udiv	r3, r2, r3
 800092c:	61fb      	str	r3, [r7, #28]
 800092e:	e00b      	b.n	8000948 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000930:	6a3a      	ldr	r2, [r7, #32]
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	009a      	lsls	r2, r3, #2
 800093a:	441a      	add	r2, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	fbb2 f3f3 	udiv	r3, r2, r3
 8000946:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	4a1c      	ldr	r2, [pc, #112]	; (80009bc <USART_Init+0x170>)
 800094c:	fba2 2303 	umull	r2, r3, r2, r3
 8000950:	095b      	lsrs	r3, r3, #5
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000958:	091b      	lsrs	r3, r3, #4
 800095a:	2264      	movs	r2, #100	; 0x64
 800095c:	fb02 f303 	mul.w	r3, r2, r3
 8000960:	69fa      	ldr	r2, [r7, #28]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	899b      	ldrh	r3, [r3, #12]
 800096a:	b29b      	uxth	r3, r3
 800096c:	b21b      	sxth	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	da0c      	bge.n	800098c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	3332      	adds	r3, #50	; 0x32
 8000978:	4a10      	ldr	r2, [pc, #64]	; (80009bc <USART_Init+0x170>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	095b      	lsrs	r3, r3, #5
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000986:	4313      	orrs	r3, r2
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
 800098a:	e00b      	b.n	80009a4 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	011b      	lsls	r3, r3, #4
 8000990:	3332      	adds	r3, #50	; 0x32
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <USART_Init+0x170>)
 8000994:	fba2 2303 	umull	r2, r3, r2, r3
 8000998:	095b      	lsrs	r3, r3, #5
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a0:	4313      	orrs	r3, r2
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	811a      	strh	r2, [r3, #8]
}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40011000 	.word	0x40011000
 80009b8:	40011400 	.word	0x40011400
 80009bc:	51eb851f 	.word	0x51eb851f

080009c0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d008      	beq.n	80009e4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	899b      	ldrh	r3, [r3, #12]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009dc:	b29a      	uxth	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80009e2:	e007      	b.n	80009f4 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	899b      	ldrh	r3, [r3, #12]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	819a      	strh	r2, [r3, #12]
  }
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a0c:	887b      	ldrh	r3, [r7, #2]
 8000a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	809a      	strh	r2, [r3, #4]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b087      	sub	sp, #28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	807b      	strh	r3, [r7, #2]
 8000a30:	4613      	mov	r3, r2
 8000a32:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a48:	887b      	ldrh	r3, [r7, #2]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	095b      	lsrs	r3, r3, #5
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000a52:	887b      	ldrh	r3, [r7, #2]
 8000a54:	f003 031f 	and.w	r3, r3, #31
 8000a58:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000a64:	693b      	ldr	r3, [r7, #16]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d103      	bne.n	8000a72 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	330c      	adds	r3, #12
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	e009      	b.n	8000a86 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d103      	bne.n	8000a80 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3310      	adds	r3, #16
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e002      	b.n	8000a86 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	3314      	adds	r3, #20
 8000a84:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000a86:	787b      	ldrb	r3, [r7, #1]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d006      	beq.n	8000a9a <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	6811      	ldr	r1, [r2, #0]
 8000a92:	68ba      	ldr	r2, [r7, #8]
 8000a94:	430a      	orrs	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000a98:	e006      	b.n	8000aa8 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	6811      	ldr	r1, [r2, #0]
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	43d2      	mvns	r2, r2
 8000aa4:	400a      	ands	r2, r1
 8000aa6:	601a      	str	r2, [r3, #0]
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	371c      	adds	r7, #28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <main>:
**  Abstract: main program
**
**===========================================================================
*/

int main(void) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

	initLED();
 8000ab8:	f000 f920 	bl	8000cfc <_Z7initLEDv>
	initUSART();
 8000abc:	f000 f99e 	bl	8000dfc <_Z9initUSARTv>
	initTIMER(TIM2,2000); // TIM 2-7, 12-14 na APB1, hodnota resetu v ms
 8000ac0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000ac4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ac8:	f000 f936 	bl	8000d38 <_Z9initTIMERP11TIM_TypeDeft>
	EnableTimerInterrupt();
 8000acc:	f000 f95e 	bl	8000d8c <_Z20EnableTimerInterruptv>

	while (1) {
 8000ad0:	e7fe      	b.n	8000ad0 <main+0x1c>
 8000ad2:	bf00      	nop

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ad8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ada:	e003      	b.n	8000ae4 <LoopCopyDataInit>

08000adc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ade:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ae0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ae2:	3104      	adds	r1, #4

08000ae4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ae8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000aec:	d3f6      	bcc.n	8000adc <CopyDataInit>
  ldr  r2, =_sbss
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000af0:	e002      	b.n	8000af8 <LoopFillZerobss>

08000af2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000af2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000af4:	f842 3b04 	str.w	r3, [r2], #4

08000af8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000afa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000afc:	d3f9      	bcc.n	8000af2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000afe:	f000 f84b 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f000 f9d1 	bl	8000ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff ffd5 	bl	8000ab4 <main>
  bx  lr    
 8000b0a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b0c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000b10:	08000f14 	.word	0x08000f14
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b18:	20000010 	.word	0x20000010
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000b1c:	20000010 	.word	0x20000010
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b20:	2000002c 	.word	0x2000002c

08000b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC_IRQHandler>
	...

08000b28 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000b3c:	e7fe      	b.n	8000b3c <HardFault_Handler+0x4>
 8000b3e:	bf00      	nop

08000b40 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>
 8000b46:	bf00      	nop

08000b48 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000b4c:	e7fe      	b.n	8000b4c <BusFault_Handler+0x4>
 8000b4e:	bf00      	nop

08000b50 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>
 8000b56:	bf00      	nop

08000b58 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4a16      	ldr	r2, [pc, #88]	; (8000bf8 <SystemInit+0x60>)
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <SystemInit+0x60>)
 8000ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000bac:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <SystemInit+0x64>)
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <SystemInit+0x64>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <SystemInit+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <SystemInit+0x64>)
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <SystemInit+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bcc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <SystemInit+0x64>)
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <SystemInit+0x68>)
 8000bd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bd4:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <SystemInit+0x64>)
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <SystemInit+0x64>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bde:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000be6:	f000 f80d 	bl	8000c04 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bea:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <SystemInit+0x60>)
 8000bec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf0:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	24003010 	.word	0x24003010

08000c04 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000c12:	4a36      	ldr	r2, [pc, #216]	; (8000cec <SetSysClock+0xe8>)
 8000c14:	4b35      	ldr	r3, [pc, #212]	; (8000cec <SetSysClock+0xe8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000c1e:	4b33      	ldr	r3, [pc, #204]	; (8000cec <SetSysClock+0xe8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d103      	bne.n	8000c3c <SetSysClock+0x38>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000c3a:	d1f0      	bne.n	8000c1e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000c3c:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <SetSysClock+0xe8>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d002      	beq.n	8000c4e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	e001      	b.n	8000c52 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d142      	bne.n	8000cde <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000c58:	4a24      	ldr	r2, [pc, #144]	; (8000cec <SetSysClock+0xe8>)
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <SetSysClock+0xe8>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000c64:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <SetSysClock+0xec>)
 8000c66:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <SetSysClock+0xec>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c6e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000c70:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <SetSysClock+0xe8>)
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <SetSysClock+0xe8>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000c78:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <SetSysClock+0xe8>)
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <SetSysClock+0xe8>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c82:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000c84:	4a19      	ldr	r2, [pc, #100]	; (8000cec <SetSysClock+0xe8>)
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <SetSysClock+0xe8>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c8e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <SetSysClock+0xe8>)
 8000c92:	4a18      	ldr	r2, [pc, #96]	; (8000cf4 <SetSysClock+0xf0>)
 8000c94:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <SetSysClock+0xe8>)
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <SetSysClock+0xe8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ca0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ca2:	bf00      	nop
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <SetSysClock+0xe8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0f9      	beq.n	8000ca4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <SetSysClock+0xf4>)
 8000cb2:	f240 7205 	movw	r2, #1797	; 0x705
 8000cb6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000cb8:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <SetSysClock+0xe8>)
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <SetSysClock+0xe8>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f023 0303 	bic.w	r3, r3, #3
 8000cc2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <SetSysClock+0xe8>)
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <SetSysClock+0xe8>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000cd0:	bf00      	nop
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SetSysClock+0xe8>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	f003 030c 	and.w	r3, r3, #12
 8000cda:	2b08      	cmp	r3, #8
 8000cdc:	d1f9      	bne.n	8000cd2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40007000 	.word	0x40007000
 8000cf4:	07405419 	.word	0x07405419
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <_Z7initLEDv>:
#include <stm32f4xx_usart.h>
#include <stdlib.h>
#include <misc.h>
#include <timer.h>

void initLED(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8000d02:	2101      	movs	r1, #1
 8000d04:	2008      	movs	r0, #8
 8000d06:	f7ff fc55 	bl	80005b4 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef initStruct;
	initStruct.GPIO_Pin = GPIO_Pin_12;
 8000d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0e:	603b      	str	r3, [r7, #0]
	initStruct.GPIO_Mode = GPIO_Mode_OUT;
 8000d10:	2301      	movs	r3, #1
 8000d12:	713b      	strb	r3, [r7, #4]
	initStruct.GPIO_OType = GPIO_OType_PP;
 8000d14:	2300      	movs	r3, #0
 8000d16:	71bb      	strb	r3, [r7, #6]
	initStruct.GPIO_PuPd = GPIO_PuPd_UP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	71fb      	strb	r3, [r7, #7]
	initStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD,&initStruct);
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <_Z7initLEDv+0x38>)
 8000d26:	f7ff fab1 	bl	800028c <GPIO_Init>

	return;
 8000d2a:	bf00      	nop

}
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40020c00 	.word	0x40020c00

08000d38 <_Z9initTIMERP11TIM_TypeDeft>:

void initTIMER(TIM_TypeDef* Timer, uint16_t TimerVal) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	460b      	mov	r3, r1
 8000d42:	807b      	strh	r3, [r7, #2]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000d44:	2101      	movs	r1, #1
 8000d46:	2001      	movs	r0, #1
 8000d48:	f7ff fc54 	bl	80005f4 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef timerInitStructure;
	timerInitStructure.TIM_Prescaler = 27000-1;
 8000d4c:	f646 1377 	movw	r3, #26999	; 0x6977
 8000d50:	81bb      	strh	r3, [r7, #12]
	timerInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000d52:	2300      	movs	r3, #0
 8000d54:	81fb      	strh	r3, [r7, #14]
	timerInitStructure.TIM_Period = TimerVal-1;
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
	timerInitStructure.TIM_ClockDivision = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	82bb      	strh	r3, [r7, #20]
	timerInitStructure.TIM_RepetitionCounter = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	75bb      	strb	r3, [r7, #22]
	TIM_TimeBaseInit(Timer, &timerInitStructure);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f7ff fc82 	bl	8000674 <TIM_TimeBaseInit>
	TIM_Cmd(Timer, ENABLE);
 8000d70:	2101      	movs	r1, #1
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fcea 	bl	800074c <TIM_Cmd>
	TIM_ITConfig(Timer, TIM_IT_Update, ENABLE); // povolenie update eventu
 8000d78:	2201      	movs	r2, #1
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff fd05 	bl	800078c <TIM_ITConfig>

	return;
 8000d82:	bf00      	nop
}
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop

08000d8c <_Z20EnableTimerInterruptv>:

void EnableTimerInterrupt(void) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0

    NVIC_InitTypeDef nvicStructure;
    nvicStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000d92:	231c      	movs	r3, #28
 8000d94:	713b      	strb	r3, [r7, #4]
    nvicStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	717b      	strb	r3, [r7, #5]
    nvicStructure.NVIC_IRQChannelSubPriority = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	71bb      	strb	r3, [r7, #6]
    nvicStructure.NVIC_IRQChannelCmd = ENABLE;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&nvicStructure);
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa0f 	bl	80001c8 <NVIC_Init>

    return;
 8000daa:	bf00      	nop
}
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop

08000db4 <TIM2_IRQHandler>:

extern "C" void TIM2_IRQHandler(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 8000db8:	2101      	movs	r1, #1
 8000dba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dbe:	f7ff fd09 	bl	80007d4 <TIM_GetITStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf14      	ite	ne
 8000dc8:	2301      	movne	r3, #1
 8000dca:	2300      	moveq	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00e      	beq.n	8000df0 <TIM2_IRQHandler+0x3c>

		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dd8:	f7ff fd26 	bl	8000828 <TIM_ClearITPendingBit>
		GPIO_ToggleBits(GPIOD, GPIO_Pin_12);
 8000ddc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <TIM2_IRQHandler+0x40>)
 8000de2:	f7ff fae1 	bl	80003a8 <GPIO_ToggleBits>
		USART_SendData(USART1,1);
 8000de6:	2101      	movs	r1, #1
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <TIM2_IRQHandler+0x44>)
 8000dea:	f7ff fe09 	bl	8000a00 <USART_SendData>

	}

	return;
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop

}
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40020c00 	.word	0x40020c00
 8000df8:	40011000 	.word	0x40011000

08000dfc <_Z9initUSARTv>:

void initUSART(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b088      	sub	sp, #32
 8000e00:	af00      	add	r7, sp, #0

	 /* enable APB2 peripheral clock for USART1
	  * note that only USART1 and USART6 are connected to APB2
	  * the other USARTs are connected to APB1
	  */
	 RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000e02:	2101      	movs	r1, #1
 8000e04:	2010      	movs	r0, #16
 8000e06:	f7ff fc15 	bl	8000634 <RCC_APB2PeriphClockCmd>

	 /* enable the peripheral clock for the pins used by
	  * USART1, PB6 for TX and PB7 for RX
	  */
	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fbd1 	bl	80005b4 <RCC_AHB1PeriphClockCmd>

	 /* This sequence sets up the TX and RX pins
	  * so they work correctly with the USART1 peripheral
	  */
	 GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7; // Pins 6 (TX) and 7 (RX) are used
 8000e12:	23c0      	movs	r3, #192	; 0xc0
 8000e14:	61bb      	str	r3, [r7, #24]
	 GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF; 			 // the pins are configured as alternate function so the USART peripheral has access to them
 8000e16:	2302      	movs	r3, #2
 8000e18:	773b      	strb	r3, [r7, #28]
	 GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;		 // this defines the IO speed and has nothing to do with the baudrate!
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	777b      	strb	r3, [r7, #29]
	 GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;		 // this defines the output type as push pull mode (as opposed to open drain)
 8000e1e:	2300      	movs	r3, #0
 8000e20:	77bb      	strb	r3, [r7, #30]
	 GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;			 // this activates the pullup resistors on the IO pins
 8000e22:	2301      	movs	r3, #1
 8000e24:	77fb      	strb	r3, [r7, #31]
	 GPIO_Init(GPIOB, &GPIO_InitStruct);				 // now all the values are passed to the GPIO_Init() function which sets the GPIO registers
 8000e26:	f107 0318 	add.w	r3, r7, #24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	481c      	ldr	r0, [pc, #112]	; (8000ea0 <_Z9initUSARTv+0xa4>)
 8000e2e:	f7ff fa2d 	bl	800028c <GPIO_Init>

	 /* The RX and TX pins are now connected to their AF
	  * so that the USART1 can take over control of the
	  * pins
	  */
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 8000e32:	2207      	movs	r2, #7
 8000e34:	2106      	movs	r1, #6
 8000e36:	481a      	ldr	r0, [pc, #104]	; (8000ea0 <_Z9initUSARTv+0xa4>)
 8000e38:	f7ff fac8 	bl	80003cc <GPIO_PinAFConfig>
	 GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	2107      	movs	r1, #7
 8000e40:	4817      	ldr	r0, [pc, #92]	; (8000ea0 <_Z9initUSARTv+0xa4>)
 8000e42:	f7ff fac3 	bl	80003cc <GPIO_PinAFConfig>

	 /* Now the USART_InitStruct is used to define the
	  * properties of USART1
	  */
	 USART_InitStruct.USART_BaudRate = 9600;				 // the baudrate is set to the value we passed into this init function
 8000e46:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000e4a:	60bb      	str	r3, [r7, #8]
	 USART_InitStruct.USART_WordLength = USART_WordLength_8b;// we want the data frame size to be 8 bits (standard)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	81bb      	strh	r3, [r7, #12]
	 USART_InitStruct.USART_StopBits = USART_StopBits_1;	 // we want 1 stop bit (standard)
 8000e50:	2300      	movs	r3, #0
 8000e52:	81fb      	strh	r3, [r7, #14]
	 USART_InitStruct.USART_Parity = USART_Parity_No;		 // we don't want a parity bit (standard)
 8000e54:	2300      	movs	r3, #0
 8000e56:	823b      	strh	r3, [r7, #16]
	 USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None; // we don't want flow control (standard)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	82bb      	strh	r3, [r7, #20]
	 USART_InitStruct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx; // we want to enable the transmitter and the receiver
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	827b      	strh	r3, [r7, #18]
	 USART_Init(USART1, &USART_InitStruct);					 // again all the properties are passed to the USART_Init function which takes care of all the bit setting
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	4619      	mov	r1, r3
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <_Z9initUSARTv+0xa8>)
 8000e68:	f7ff fcf0 	bl	800084c <USART_Init>
	 /* Here the USART1 receive interrupt is enabled
	  * and the interrupt controller is configured
	  * to jump to the USART1_IRQHandler() function
	  * if the USART1 receive interrupt occurs
	  */
	 USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); // enable the USART1 receive interrupt
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f240 5125 	movw	r1, #1317	; 0x525
 8000e72:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <_Z9initUSARTv+0xa8>)
 8000e74:	f7ff fdd6 	bl	8000a24 <USART_ITConfig>

	 NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;		  // we want to configure the USART1 interrupts
 8000e78:	2325      	movs	r3, #37	; 0x25
 8000e7a:	713b      	strb	r3, [r7, #4]
	 NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 8; // this sets the priority group of the USART1 interrupts
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	717b      	strb	r3, [r7, #5]
	 NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;		  // this sets the subpriority inside the group
 8000e80:	2300      	movs	r3, #0
 8000e82:	71bb      	strb	r3, [r7, #6]
	 NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			  // the USART1 interrupts are globally enabled
 8000e84:	2301      	movs	r3, #1
 8000e86:	71fb      	strb	r3, [r7, #7]
	 NVIC_Init(&NVIC_InitStructure);							  // the properties are passed to the NVIC_Init function which takes care of the low level stuff
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f99c 	bl	80001c8 <NVIC_Init>

	 // finally this enables the complete USART1 peripheral
	 USART_Cmd(USART1, ENABLE);
 8000e90:	2101      	movs	r1, #1
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <_Z9initUSARTv+0xa8>)
 8000e94:	f7ff fd94 	bl	80009c0 <USART_Cmd>

	 return;
 8000e98:	bf00      	nop
}
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40011000 	.word	0x40011000

08000ea8 <__libc_init_array>:
 8000ea8:	b570      	push	{r4, r5, r6, lr}
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <__libc_init_array+0x3c>)
 8000eac:	4c0e      	ldr	r4, [pc, #56]	; (8000ee8 <__libc_init_array+0x40>)
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	10a4      	asrs	r4, r4, #2
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	461e      	mov	r6, r3
 8000eb6:	42a5      	cmp	r5, r4
 8000eb8:	d004      	beq.n	8000ec4 <__libc_init_array+0x1c>
 8000eba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ebe:	4798      	blx	r3
 8000ec0:	3501      	adds	r5, #1
 8000ec2:	e7f8      	b.n	8000eb6 <__libc_init_array+0xe>
 8000ec4:	f000 f816 	bl	8000ef4 <_init>
 8000ec8:	4c08      	ldr	r4, [pc, #32]	; (8000eec <__libc_init_array+0x44>)
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <__libc_init_array+0x48>)
 8000ecc:	1ae4      	subs	r4, r4, r3
 8000ece:	10a4      	asrs	r4, r4, #2
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	461e      	mov	r6, r3
 8000ed4:	42a5      	cmp	r5, r4
 8000ed6:	d004      	beq.n	8000ee2 <__libc_init_array+0x3a>
 8000ed8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000edc:	4798      	blx	r3
 8000ede:	3501      	adds	r5, #1
 8000ee0:	e7f8      	b.n	8000ed4 <__libc_init_array+0x2c>
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}
 8000ee4:	08000f0c 	.word	0x08000f0c
 8000ee8:	08000f0c 	.word	0x08000f0c
 8000eec:	08000f10 	.word	0x08000f10
 8000ef0:	08000f0c 	.word	0x08000f0c

08000ef4 <_init>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr

08000f00 <_fini>:
 8000f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f02:	bf00      	nop
 8000f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f06:	bc08      	pop	{r3}
 8000f08:	469e      	mov	lr, r3
 8000f0a:	4770      	bx	lr
